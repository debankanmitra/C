#include <stdio.h>

#define N 4

int board[N][N];

void initializeBoard() {
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            board[i][j] = 0;
        }
    }
}

int isSafe(int row, int col) {
    int i, j;

    // Check the left side of the current row
    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return 0;
        }
    }

    // Check the upper diagonal on the left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return 0;
        }
    }

    // Check the lower diagonal on the left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) {
            return 0;
        }
    }

    return 1;
}

int solveNQueens(int col) {
    if (col >= N) {
        return 1; // All queens have been successfully placed
    }

    int i;
    for (i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1; // Place the queen

            if (solveNQueens(col + 1)) {
                return 1; // Queens can be placed in the remaining columns
            }

            board[i][col] = 0; // Backtrack and remove the queen
        }
    }

    return 0; // Queens cannot be placed in the current configuration
}

void printBoard() {
    int i, j;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    initializeBoard();

    if (solveNQueens(0)) {
        printf("Solution:\n");
        printBoard();
    } else {
        printf("No solution found.\n");
    }

    return 0;
}






------------------------------
Start with an empty chessboard of size NÃ—N.
Begin with the first column (col = 0).
If all queens are successfully placed (col >= N), return true to indicate a solution.
For the current column, iterate through each row (row = 0 to N-1):
a. Check if it is safe to place a queen at board[row][col]:
If any other queen is present in the same row or in the upper-left or lower-left diagonal, it is not safe to place a queen at this position.
Otherwise, it is safe to place a queen.
b. If it is safe to place a queen at board[row][col]:
Place a queen at this position (board[row][col] = 1).
Recursively solve the problem for the next column (solveNQueens(col + 1)).
If this recursive call returns true, it means all queens can be successfully placed in the remaining columns, so return true.
If the recursive call returns false, it means it was not possible to place all queens in the remaining columns from this position, so backtrack.
Remove the queen from board[row][col] (board[row][col] = 0) and continue to the next row.
If no safe position is found in the current column, return false to backtrack and try a different position in the previous column.
If all positions have been tried in the first column and no solution is found, return false to indicate that no solution exists.
This algorithm uses backtracking to explore all possible configurations of queen placements until a valid solution is found or all possibilities are exhausted. The isSafe() function checks whether it is safe to place a queen at a particular position by examining the current configuration of the board. The solveNQueens() function recursively solves the problem for each column, and the main program initializes the board and calls the solveNQueens() function to find a solution.
