#include <stdio.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the 0/1 Knapsack problem using Dynamic Programming
int knapsack(int capacity, int weights[], int values[], int numItems) {
    int dp[numItems + 1][capacity + 1];

    // Build the dp table
    for (int i = 0; i <= numItems; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            }
            else if (weights[i - 1] <= w) {
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            }
            else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // Return the maximum value that can be achieved
    return dp[numItems][capacity];
}

int main() {
    int capacity = 50;
    int numItems = 3;

    int weights[] = {10, 20, 30};
    int values[] = {60, 100, 120};

    int maxValue = knapsack(capacity, weights, values, numItems);

    printf("Maximum value: %d\n", maxValue);

    return 0;
}

